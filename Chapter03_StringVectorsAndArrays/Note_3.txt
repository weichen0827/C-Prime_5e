1. 初始化
	
	string s1("haya");	// 直接初始化
	string s2(4, 'a');	// 直接初始化，s2的内容是 aaa

	string s3 = "hiya";	// 拷贝初始化
	string s4 = string(10, 'c'); // 拷贝初始化 

2. 读取位置数量的 string 对象
	------------------------------------------------------------
	string word;
	while (cin >> word)			// 反复读取，直至到达文件末尾
		cout << word << endl;	// 逐个输出单词，每个单词（空格）后面紧跟一个换行
	------------------------------------------------------------


3. 使用 getline 读取一整行

	------------------------------------------------------------
	string line;
	while (getline(cin, line))	// 每次读入一整行，直至到达文件末尾
		cout << line << endl;
	-------------------------------------------------------------

	因为 line 中不包含换行符，所以我们手动地加上换行符。和往常一样，使用endl结束当前行并刷新显示缓冲区。

	触发 getline 函数返回的那个换行符实际上被丢弃了，得到的 string 对象中并不包含换行符。

4. string::size_type 类型	-- unsigned
	假设n是一个具有负值的int，则表达式 s.size()<n 的判断结果几乎肯定是true，这是因为负值n会自动转化成一个比较大的无符号值

	如果一条表达式中已经有了size() 函数就不要再使用int 了，这样可以避免混用int和unsigned 可能带来的问题。

5. 字面值和string对象相加
    当把string对象和字符字面值及字符串字面值和混在一条语句中使用时，必须确保每个加法运算符（+）的两侧的运算对象至少有一个时string：
    string s1 = "hello";
    string s2 = s1 + ", "        // 正确
    string s3 = "hello" + ", "    // 错误：两个运算对象都不是string

6. 范围 for ---- range for
	遍历给定序列中的每个元素并对序列中的每个值执行某种操作，语法形式：
		for (declaration : expression)
			statement
	每次迭代，declaration 部分的变量会被初始化为expression部分的下一个元素值。

	eg:
		string str("Hello World");
		// 每行输出str中一个字符。
		for (auto c : str)
			cout << c << endl;

	想要改变string对象中字符的值，必须把循环变量定义成<引用类型>。
		// 将str转换成大写形式。
		for (auto &c : str)
			c = toupper(c);
	---- 若str为const string类型，则 c 也是 const类型

7. vector
	--表示对象的集合，其中所有对象的类型都相同。“容器”

	编译器根据模板创建类或函数的过程称为实例化。

	在模板名字后面跟一对尖括号，在括号内放上信息--vector内所存放对象的类型：
	vector<int> ivec;		// ievc保存int类型的对象
	vector<vector<string>>;	// 该向量元素是vector对象

	c++11:
	vector对象的元素赋初值的方法，即列表初始化
	vector<string> articles = {"a", "an", "the"};
	或 vector<string> articles{"a", "an", "the"};

	列表初始值和元素数量
	vector<int> v1(10);		// v1有10个元素，每个的值都是0
	vector<int> v2{10};		// v2有1个元素，该元素的值为10
	vector<int> v3(10, 1);	// v3有10个元素，每个的值都是1
	vector<int> v4{10, 1};	// v4有2个元素，值分别是10和1


	vector<string> v5{"hi"}; // 列表初始化：v5有一个元素
	vector<string> v6("hi"); // 错误：不能使用字符串字面值构建vector对象
	vector<string> v7{10};	// v7有10个默认初始化元素
	vector<string> v8{10, "hi"}; // v8有10个值为"hi"的元素
	vector<string> v8(10, "hi");

	圆括号--提供的值用来构造vector对象
	花括号--表述成想列表初始化该vector对象

	想要列表初始化vector对象，花括号里的值必须和元素类型相同

	======
	向vector对象中添加元素
	成员函数 push_back();

	vector 对象（以及string对象）的下标运算符可用于访问已存在的元素，而不能用于添加元素。

	确保下标合法的一种有效手段就是尽可能使用范围for语句

8. iterator -- 迭代器
	所有标准库容器都可以使用迭代器。

	begin() 和 end() 运算符。

	vector<int> v;
	const vector<int> cv;
	auto it1 = v.begin();	// it1 的类型是 vector<int>::iterator
	auto it2 = cv.begin();	// it2 的类型是 vector<int>::const_iterator

	cbegin() 和 cend() 的返回的类型都是 const_iterator

	**==> (*it).empty();   ==>   it->empty();	//等价

	vector对象的动态增长的限制：
	1.不能在范围for循环中向vector对象添加元素。
	2.任何可能改变vector对象容量的操作，如push_back，都会使该vector对象的迭代器失效。

	**==> 谨记，但凡使用了迭代器的循环体，都不要向迭代器所属的容器添加元素。

	迭代器可与int类型进行运算，但是不能将只含有int类型赋值给迭代器；
	
	iter1 = iter1 + 2;	// 正确
	iter2 = 2；			// 错误


9. 数组
	存放类型相同的对象的容器。
	数组的大小确定不变，不能随意向数组中增加元素。
	
	在大多数表达式中，使用数组类型的对象其实是使用一个指向该数组[首]元素的指针。



