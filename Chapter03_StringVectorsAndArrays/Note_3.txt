1. 初始化
	
	string s1("haya");	// 直接初始化
	string s2(4, 'a');	// 直接初始化，s2的内容是 aaa

	string s3 = "hiya";	// 拷贝初始化
	string s4 = string(10, 'c'); // 拷贝初始化 

2. 读取位置数量的 string 对象
	------------------------------------------------------------
	string word;
	while (cin >> word)			// 反复读取，直至到达文件末尾
		cout << word << endl;	// 逐个输出单词，每个单词（空格）后面紧跟一个换行
	------------------------------------------------------------


3. 使用 getline 读取一整行

	------------------------------------------------------------
	string line;
	while (getline(cin, line))	// 每次读入一整行，直至到达文件末尾
		cout << line << endl;
	-------------------------------------------------------------

	因为 line 中不包含换行符，所以我们手动地加上换行符。和往常一样，使用endl结束当前行并刷新显示缓冲区。

	触发 getline 函数返回的那个换行符实际上被丢弃了，得到的 string 对象中并不包含换行符。

4. string::size_type 类型	-- unsigned
	假设n是一个具有负值的int，则表达式 s.size()<n 的判断结果几乎肯定是true，这是因为负值n会自动转化成一个比较大的无符号值

	如果一条表达式中已经有了size() 函数就不要再使用int 了，这样可以避免混用int和unsigned 可能带来的问题。

5. 字面值和string对象相加
    当把string对象和字符字面值及字符串字面值和混在一条语句中使用时，必须确保每个加法运算符（+）的两侧的运算对象至少有一个时string：
    string s1 = "hello";
    string s2 = s1 + ", "        // 正确
    string s3 = "hello" + ", "    // 错误：两个运算对象都不是string

6. 范围 for ---- range for
	遍历给定序列中的每个元素并对序列中的每个值执行某种操作，语法形式：
		for (declaration : expression)
			statement
	每次迭代，declaration 部分的变量会被初始化为expression部分的下一个元素值。

	eg:
		string str("Hello World");
		// 每行输出str中一个字符。
		for (auto c : str)
			cout << c << endl;

	想要改变string对象中字符的值，必须把循环变量定义成引用类型。
		// 将str转换成大写形式。
		for (auto &c : str)
			c = toupper(c);