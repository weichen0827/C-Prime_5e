
1. 如果想声明一个变量而非定义它，就在变量名前面添加关键字 extern，而且不要显示地初始化变量：
    extern int i;   //声明 i 而非定义 i
    int j;          //声明并定义 j
    
    任何包含了显示初始化的声明即成为定义。
    
    extern double pi = 3.1416;  // 定义
    
    在函数体内部，如果试图初始化一个由extern关键字标记的变量，将引发错误。
    
    变量能且只能被定义一次，但是可以被多次声明。
    
        
2. 引用的类型与之要绑定的对象必须严格匹配
    
        int i = 0, &ri = i;
        char c;
        char &rc = c;

3. 创建 const 的对象必须初始化
    const 对象仅在文件內有效
    如果想在多个文件间共享 const 对象，必须在变量的定义之前添加 extern 关键字
    并且在其他文件使用时，声明也需要添加 extern 关键字
    
    用于声明引用的const都是底层const
    
4. constexpr
    const expression    常量表达式
    指的是值不会改变并且在编译过程就能得到计算结果的表达式。
    c++11：一般来说，如果你认定变量是一个常量表达式，那就把它声明成 constexpr 类型。
    

5. auto
	一般会忽略的掉顶层const，同时底层const则会保留下来。
	
	对常量对象取地址是一种底层 const。

	要在一条语句中定义多个变量，切记，符号&和*只从属于某个声明符，而非基本数据类型的一部分，因此初始值必须是同一种类型。

6. decltype
	处理顶层const和引用的方式与auto有些许不同。

	如果decltype使用的表达式是一个变量，则decltype返回该变量的类型（包括顶层const和引用在内）。
	如果decltype使用的表达式不是一个变量，则decltype返回表达式对应的类型。

	引用从来都作为其所指对象的同义词出现，只有用在decltype处是一个例外。

	decltype((variable)) // 注意是双层（或多层）括号
	其结果永远是引用；
	decltype(variable)
	其结果只有当variable本身是一个引用时才是引用。

	赋值是会产生引用的一类典型表达式，引用的类型就是左值的类型。
	也就是说，如果i时int，则表达式i=x的类型就是int&。